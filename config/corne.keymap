/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BSPC |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp TAB    &kp Q  &kp W  &kp E              &kp R         &kp T        &kp Y    &kp U        &kp I      &kp O    &kp P     &kp BSPC
&kp LCTRL  &kp A  &kp S  &kp D              &kp F         &kp G        &kp H    &kp J        &kp K      &kp L    &kp SEMI  &kp SQT
&kp LSHFT  &kp Z  &kp X  &kp C              &kp V         &kp B        &kp N    &kp M        &kp COMMA  &kp DOT  &kp FSLH  &kp UNDER
                         &mt LEFT_ALT LCMD  &lt 1 ESCAPE  &kp SPACE    &kp RET  &lt 2 GRAVE  &kp LALT
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BSPC |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &kp N1           &kp N2         &kp N3                &kp N4            &kp N5            &kp NUMBER_6     &kp N7             &kp N8                 &kp N9            &kp N0       &kp BSPC
&trans  &trans           &kp LESS_THAN  &kp LEFT_PARENTHESIS  &kp LEFT_BRACKET  &kp LEFT_BRACE    &kp RIGHT_BRACE  &kp RIGHT_BRACKET  &kp RIGHT_PARENTHESIS  &kp GREATER_THAN  &kp PIPE     &kp BACKSLASH
&trans  &kp EXCLAMATION  &kp AT_SIGN    &kp HASH              &kp AMPERSAND     &kp DOLLAR        &kp EQUAL        &kp PLUS           &kp MINUS              &kp ASTERISK      &kp PERCENT  &trans
                                        &trans                &trans            &kp SPACE         &kp RET          &trans             &trans
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BSPC |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp F1  &kp F2        &kp F3        &kp F4        &kp F5        &kp F6          &kp F7             &kp F8          &kp F9           &kp F10     &kp F11               &kp F12
&trans  &bt BT_CLR    &trans        &trans        &kp PG_DN     &kp PG_UP       &kp LEFT_ARROW     &kp DOWN_ARROW  &kp UP_ARROW     &kp RIGHT   &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC
&trans  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &kp C_VOLUME_DOWN  &kp C_MUTE      &kp C_VOLUME_UP  &kp C_NEXT  &kp C_PREV            &kp C_PLAY_PAUSE
                                    &trans        &trans        &kp SPACE       &kp RET            &trans          &trans
            >;
        };

        nav_layer {
            bindings = <
&none  &kp LA(N1)      &kp LA(N2)      &kp LA(N3)      &kp LA(N4)      &kp LA(N5)        &kp LA(N6)      &kp LA(N7)      &kp LA(N8)      &kp LA(N9)      &kp LA(N0)      &none
&none  &kp LA(LS(N1))  &kp LA(LS(N2))  &kp LA(LS(N3))  &kp LA(LS(N4))  &kp LA(LS(N5))    &kp LA(LS(N6))  &kp LA(LS(N7))  &kp LA(LS(N8))  &kp LA(LS(N9))  &kp LA(LS(N0))  &none
&none  &none           &none           &none           &none           &none             &none           &none           &none           &none           &none           &none
                                       &none           &none           &none             &none           &none           &none
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        nav {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
